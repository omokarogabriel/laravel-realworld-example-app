



# name: Deploy to Amazon ECS

# on:
#   push:
#     branches: [ "main" ]

# env:
#   AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: laravel-ecr-repository           # set this to your Amazon ECR repository name
#   ECS_SERVICE: laravel-ecs-service                # set this to your Amazon ECS service name
#   ECS_CLUSTER: laravel-ecs-cluster                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: laravel           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition

# permissions:
#   contents: read

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: dev

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
#         force-new-deployment: true
















# name: Deploy Laravel + Nginx to Amazon ECS

# on:
#   push:
#     branches: [ "main" ]

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: laravel-ecr-repository
#   ECS_SERVICE: laravel-ecs-service
#   ECS_CLUSTER: laravel-ecs-cluster
#   ECS_TASK_DEFINITION: laravel-ecs-task-def-fam 
#   LARAVEL_CONTAINER_NAME: laravel
#   NGINX_CONTAINER_NAME: laravel-nginx

# permissions:
#   contents: read

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: dev

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build and push Laravel image
#       id: build-laravel
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:php-$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:php-$IMAGE_TAG
#         echo "laravel_image=$ECR_REGISTRY/$ECR_REPOSITORY:php-$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Build and push Nginx image
#       id: build-nginx
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -f Dockerfile.nginx -t $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG
#         echo "nginx_image=$ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Update ECS Task Definition with new images
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.LARAVEL_CONTAINER_NAME }}
#         image: ${{ steps.build-laravel.outputs.laravel_image }}

#     - name: Update ECS Task Definition for Nginx
#       id: task-def-nginx
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         container-name: ${{ env.NGINX_CONTAINER_NAME }}
#         image: ${{ steps.build-nginx.outputs.nginx_image }}

#     - name: Deploy ECS service
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
#         force-new-deployment: true





# name: Deploy Laravel + Nginx to ECS

# on:
#   push:
#     branches: [ "main" ]

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: laravel-ecr-repository
#   ECS_CLUSTER: laravel-ecs-cluster
#   ECS_SERVICE: laravel-ecs-service
#   TASK_DEFINITION_FAMILY: laravel-ecs-task-def-fam
#   LARAVEL_CONTAINER_NAME: laravel
#   NGINX_CONTAINER_NAME: laravel-nginx

# permissions:
#   contents: read

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push Laravel image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: php-${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "LARAVEL_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

#       - name: Build, tag, and push NGINX image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: nginx-${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.nginx .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "NGINX_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

#       - name: Render ECS Task Definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: .github/ecs/laravel-task-def.json
#           container-name: ${{ env.LARAVEL_CONTAINER_NAME }}
#           image: ${{ env.LARAVEL_IMAGE }}

#       - name: Update NGINX image in ECS Task Definition
#         id: task-def-nginx
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           container-name: ${{ env.NGINX_CONTAINER_NAME }}
#           image: ${{ env.NGINX_IMAGE }}

#       - name: Deploy to ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
#             # force-new-deployment: true








# name: Deploy Laravel + Nginx to ECS

# on:
#   push:
#     branches: [ "main" ]

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: laravel-ecr-repository
#   ECS_CLUSTER: laravel-ecs-cluster
#   ECS_SERVICE: laravel-ecs-service
#   TERRAFORM_DIR: ./terraform/dev  # Path to your Terraform environment

# permissions:
#   contents: read

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push Laravel image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: php-${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "LARAVEL_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

#       - name: Build, tag, and push NGINX image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: nginx-${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.nginx .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "NGINX_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

#       - name: Initialize Terraform
#         working-directory: ${{ env.TERRAFORM_DIR }}
#         run: terraform init

#       - name: Apply Terraform
#         id: terraform-apply
#         working-directory: ${{ env.TERRAFORM_DIR }}
#         run: |
#           terraform apply -auto-approve
#           # Export the ECS task definition ARN as an output
#           echo "ecs_task_definition_arn=$(terraform output -raw ecs_task_definition_arn)" >> $GITHUB_ENV

#       - name: Update Laravel container in ECS Task Definition
#         id: task-def-laravel
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ecs_task_definition_arn }}
#           container-name: laravel
#           image: ${{ env.LARAVEL_IMAGE }}

#       - name: Update NGINX container in ECS Task Definition
#         id: task-def-nginx
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def-laravel.outputs.task-definition }}
#           container-name: laravel-nginx
#           image: ${{ env.NGINX_IMAGE }}

#       - name: Deploy to ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
#           force-new-deployment: true





name: Deploy Laravel + Nginx to ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: laravel-ecr-repository
  ECS_CLUSTER: laravel-ecs-cluster
  ECS_SERVICE: laravel-ecs-service
  TASK_DEFINITION: .github/ecs/laravel-task-def.json
  LARAVEL_CONTAINER_NAME: laravel
  NGINX_CONTAINER_NAME: laravel-nginx

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Laravel image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: php-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "LARAVEL_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push NGINX image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: nginx-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.nginx .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "NGINX_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update ECS Task Definition with new images
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}
          container-names: ${{ env.LARAVEL_CONTAINER_NAME }},${{ env.NGINX_CONTAINER_NAME }}
          images: ${{ env.LARAVEL_IMAGE }},${{ env.NGINX_IMAGE }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
